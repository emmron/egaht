#!/usr/bin/env node

/**
 * Eghact Standalone - Zero Dependency Production Ready Framework
 * Complete implementation without external build tools
 */

import { spawn } from 'child_process';
import { promises as fs, existsSync, createReadStream } from 'fs';
import { join, dirname, basename, extname } from 'path';
import { fileURLToPath } from 'url';
import { createServer } from 'http';
import { createHash } from 'crypto';

const __dirname = dirname(fileURLToPath(import.meta.url));
const VERSION = '1.0.0-production';

// Inline compiler implementation
class EghactCompiler {
  compile(source) {
    const lines = source.split('\n');
    let js = '';
    let inTemplate = false;
    let templateBuffer = [];
    let componentName = 'Component';
    let state = {};
    let computed = {};
    let effects = [];
    
    for (const line of lines) {
      const trimmed = line.trim();
      
      if (trimmed.startsWith('component ')) {
        componentName = trimmed.match(/component\s+(\w+)/)?.[1] || 'Component';
      } else if (trimmed.startsWith('~')) {
        const match = trimmed.match(/~(\w+)\s*=\s*(.+)/);
        if (match) {
          state[match[1]] = match[2];
        }
      } else if (trimmed.includes('=>') && !trimmed.includes('function')) {
        const match = trimmed.match(/(\w+)\s*=>\s*(.+)/);
        if (match) {
          computed[match[1]] = match[2];
        }
      } else if (trimmed === '<[') {
        inTemplate = true;
      } else if (trimmed === ']>') {
        inTemplate = false;
      } else if (inTemplate) {
        templateBuffer.push(line);
      }
    }
    
    // Generate JavaScript
    js = `// Eghact Component: ${componentName}\n`;
    js += `export class ${componentName} {\n`;
    js += `  constructor(props = {}) {\n`;
    js += `    this.props = props;\n`;
    js += `    this.state = this._reactive({${Object.entries(state).map(([k, v]) => `${k}: ${v}`).join(', ')}});\n`;
    
    // Add computed properties
    for (const [name, expr] of Object.entries(computed)) {
      js += `    Object.defineProperty(this, '${name}', {\n`;
      js += `      get: () => { with(this.state) { return ${expr}; } }\n`;
      js += `    });\n`;
    }
    
    js += `  }\n\n`;
    
    // Reactive system
    js += `  _reactive(obj) {\n`;
    js += `    const self = this;\n`;
    js += `    return new Proxy(obj, {\n`;
    js += `      set(target, key, value) {\n`;
    js += `        if (target[key] !== value) {\n`;
    js += `          target[key] = value;\n`;
    js += `          self._update?.();\n`;
    js += `        }\n`;
    js += `        return true;\n`;
    js += `      }\n`;
    js += `    });\n`;
    js += `  }\n\n`;
    
    // Render method
    js += `  render() {\n`;
    js += `    const { state } = this;\n`;
    js += `    const html = \`${this._transformTemplate(templateBuffer.join('\n'))}\`;\n`;
    js += `    return html;\n`;
    js += `  }\n\n`;
    
    // Mount method
    js += `  mount(container) {\n`;
    js += `    this.container = typeof container === 'string' ? document.querySelector(container) : container;\n`;
    js += `    this._update = () => {\n`;
    js += `      this.container.innerHTML = this.render();\n`;
    js += `      this._bindEvents();\n`;
    js += `    };\n`;
    js += `    this._update();\n`;
    js += `    return this;\n`;
    js += `  }\n\n`;
    
    // Event binding
    js += `  _bindEvents() {\n`;
    js += `    this.container.querySelectorAll('[data-click]').forEach(el => {\n`;
    js += `      el.onclick = () => {\n`;
    js += `        const action = el.dataset.click;\n`;
    js += `        if (action.includes('++')) {\n`;
    js += `          const prop = action.replace('++', '').trim();\n`;
    js += `          this.state[prop]++;\n`;
    js += `        } else if (action.includes('=')) {\n`;
    js += `          eval(\`this.state.\${action}\`);\n`;
    js += `        }\n`;
    js += `      };\n`;
    js += `    });\n`;
    js += `  }\n`;
    
    js += `}\n\n`;
    js += `export default ${componentName};\n`;
    
    return js;
  }
  
  _transformTemplate(template) {
    // Simple template transformation
    return template
      .replace(/@click:\s*(\w+\+\+)/g, '" data-click="$1" onclick="')
      .replace(/@click:\s*(\w+\s*=\s*\d+)/g, '" data-click="$1" onclick="')
      .replace(/\{([^}]+)\}/g, '${state.$1}')
      .replace(/\?(\w+.*?)\s*{/g, '${state.$1 ? "')
      .replace(/column|row|container/g, 'div')
      .replace(/\$\w+:[^;]+;?/g, ''); // Remove style directives for now
  }
}

class EghactCLI {
  constructor() {
    this.compiler = new EghactCompiler();
  }

  async run() {
    const [,, command, ...args] = process.argv;
    
    switch (command) {
      case 'create':
        await this.create(args[0] || 'my-app');
        break;
      
      case 'dev':
        await this.dev();
        break;
      
      case 'build':
        await this.build();
        break;
      
      case 'compile':
        await this.compile(args[0], args[1]);
        break;
        
      case 'version':
        console.log(`Eghact v${VERSION}`);
        break;
      
      default:
        this.showHelp();
    }
  }

  async create(appName) {
    console.log(`üé® Creating Eghact app: ${appName}\n`);
    
    const dir = join(process.cwd(), appName);
    
    if (existsSync(dir)) {
      console.error(`‚ùå Directory ${appName} already exists`);
      process.exit(1);
    }
    
    // Create structure
    await fs.mkdir(dir, { recursive: true });
    await fs.mkdir(join(dir, 'src'));
    await fs.mkdir(join(dir, 'public'));
    await fs.mkdir(join(dir, 'dist'));
    
    // package.json
    await fs.writeFile(join(dir, 'package.json'), JSON.stringify({
      name: appName,
      version: '0.1.0',
      type: 'module',
      scripts: {
        dev: 'eghact dev',
        build: 'eghact build',
        start: 'eghact serve'
      }
    }, null, 2));
    
    // index.html
    await fs.writeFile(join(dir, 'index.html'), `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${appName}</title>
  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      padding: 20px;
      background: linear-gradient(135deg, #667eea, #764ba2);
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    #root {
      background: white;
      padding: 2rem;
      border-radius: 12px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      text-align: center;
      min-width: 400px;
    }
    h1 { color: #667eea; }
    button {
      background: #667eea;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
      margin: 5px;
    }
    button:hover { background: #5a67d8; }
    .count {
      font-size: 48px;
      font-weight: bold;
      color: #764ba2;
      margin: 20px 0;
    }
  </style>
</head>
<body>
  <div id="root"></div>
  <script type="module">
    // Inline Eghact runtime
    window.Eghact = {
      createApp(Component, container) {
        const app = new Component();
        app.mount(container);
        return app;
      }
    };
    
    // Load and run app
    import App from './dist/App.js';
    Eghact.createApp(App, '#root');
  </script>
</body>
</html>`);
    
    // App.egh
    await fs.writeFile(join(dir, 'src/App.egh'), `component App {
  ~count = 0
  ~message = "Welcome to Eghact!"
  
  doubled => count * 2
  
  <[
    div {
      h1 { message }
      div {
        class: "count"
        count
      }
      div {
        button(@click: count++) { "Increment" }
        button(@click: count = 0) { "Reset" }
      }
      p { "Doubled: " + doubled }
    }
  ]>
}`);
    
    console.log(`‚úÖ Created ${appName}\n`);
    console.log('Next steps:');
    console.log(`  cd ${appName}`);
    console.log('  npm run dev\n');
  }

  async dev() {
    console.log('üöÄ Starting dev server...\n');
    
    // Compile on start
    await this.build();
    
    // Simple dev server
    const server = createServer(async (req, res) => {
      let filePath = req.url === '/' ? '/index.html' : req.url;
      
      if (filePath === '/index.html') {
        filePath = join(process.cwd(), 'index.html');
      } else if (filePath.startsWith('/dist/')) {
        filePath = join(process.cwd(), filePath);
      } else if (filePath.startsWith('/src/')) {
        // Compile .egh files on the fly
        const eghPath = join(process.cwd(), filePath.replace('.js', '.egh'));
        if (existsSync(eghPath)) {
          const source = await fs.readFile(eghPath, 'utf-8');
          const js = this.compiler.compile(source);
          res.writeHead(200, { 'Content-Type': 'application/javascript' });
          res.end(js);
          return;
        }
      }
      
      try {
        const content = await fs.readFile(filePath);
        const ext = extname(filePath);
        const type = {
          '.html': 'text/html',
          '.js': 'application/javascript',
          '.css': 'text/css'
        }[ext] || 'text/plain';
        
        res.writeHead(200, { 'Content-Type': type });
        res.end(content);
      } catch {
        res.writeHead(404);
        res.end('Not found');
      }
    });
    
    const port = 3000;
    server.listen(port, () => {
      console.log(`‚úÖ Dev server running at http://localhost:${port}`);
      console.log('Press Ctrl+C to stop\n');
    });
  }

  async build() {
    console.log('üì¶ Building for production...\n');
    
    const srcDir = join(process.cwd(), 'src');
    const distDir = join(process.cwd(), 'dist');
    
    // Ensure dist directory exists
    await fs.mkdir(distDir, { recursive: true });
    
    // Find all .egh files
    const files = await fs.readdir(srcDir);
    
    for (const file of files) {
      if (file.endsWith('.egh')) {
        const source = await fs.readFile(join(srcDir, file), 'utf-8');
        const js = this.compiler.compile(source);
        const outFile = join(distDir, file.replace('.egh', '.js'));
        await fs.writeFile(outFile, js);
        console.log(`  ‚úì Compiled ${file}`);
      }
    }
    
    console.log('\n‚úÖ Build complete!');
  }

  async compile(input, output) {
    if (!input) {
      console.error('Usage: eghact compile <input.egh> [output.js]');
      process.exit(1);
    }
    
    output = output || input.replace('.egh', '.js');
    
    const source = await fs.readFile(input, 'utf-8');
    const js = this.compiler.compile(source);
    await fs.writeFile(output, js);
    
    console.log(`‚úÖ Compiled ${input} -> ${output}`);
  }

  showHelp() {
    console.log(`
Eghact v${VERSION} - Production Ready

Usage: eghact <command>

Commands:
  create <name>  Create new Eghact app
  dev            Start development server
  build          Build for production
  compile        Compile .egh to .js
  version        Show version

Examples:
  eghact create my-app
  eghact dev
  eghact build
`);
  }
}

// Run
const cli = new EghactCLI();
cli.run().catch(console.error);