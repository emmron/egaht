---
state:
  todos: []
  newTodo: ""
  filter: "all"
  
queries:
  filteredTodos: |
    FROM $state.todos
    WHERE filter = "all" OR completed = (filter = "completed") OR !completed = (filter = "active")
    SELECT *
  
  completedCount: |
    FROM $state.todos
    WHERE completed = true
    SELECT COUNT(*) AS count
    
  activeCount: |
    FROM $state.todos  
    WHERE completed = false
    SELECT COUNT(*) AS count
---

# Todo App {.app-root}

A revolutionary todo app built with .eg files - no JavaScript, no Node.js, just pure native performance.

## Add Todo {.add-section}

### New Todo Input {#add-form data-bind="newTodo"}

[!Form @submit={addTodo}]
  [!Input 
    placeholder="What needs to be done?" 
    data-bind="newTodo"
    @keyup.enter={addTodo}
  ]
  [!Button type="submit" disabled={!newTodo}]
    Add Task
  [/Button]
[/Form]

## Tasks {#todo-list data-query="filteredTodos"}

### Active Tasks ({activeCount.count})

:::for todo in filteredTodos
#### {todo.title} {#todo-{todo.id} data-bind="todo"}

[!Checkbox data-bind="todo.completed" @change={toggleTodo(todo.id)}]
[!Text class={todo.completed ? "completed" : ""}]{todo.title}[/Text]
[!Button 
  @click={deleteTodo(todo.id)} 
  class="delete-btn"
  aria-label="Delete {todo.title}"
]Ã—[/Button]

:::if todo.completed
*Completed at {todo.completedAt}*
:::
:::

:::if filteredTodos.length == 0
### No tasks yet! {.empty-state}

Start by adding a new task above.
:::

## Filters {.filter-section}

### View: {filter}

[!RadioGroup data-bind="filter"]
  [!Radio value="all" @change={updateFilter}]All ({todos.length})[/Radio]
  [!Radio value="active" @change={updateFilter}]Active ({activeCount.count})[/Radio]  
  [!Radio value="completed" @change={updateFilter}]Completed ({completedCount.count})[/Radio]
[/RadioGroup]

## Statistics {.stats data-query="completedCount,activeCount"}

**Progress:** {completedCount.count} / {todos.length} tasks completed

[!ProgressBar value={completedCount.count} max={todos.length}]

:::if completedCount.count > 0
[!Button @click={clearCompleted} class="clear-completed"]
  Clear {completedCount.count} completed
[/Button]
:::

## Styles {.styles}

```css
.app-root {
  max-width: 600px;
  margin: 0 auto;
  padding: 2rem;
  font-family: system-ui, -apple-system, sans-serif;
}

#todo-list {
  list-style: none;
  padding: 0;
}

.completed {
  text-decoration: line-through;
  opacity: 0.6;
}

.delete-btn {
  color: #ff4444;
  font-weight: bold;
  border: none;
  background: none;
  cursor: pointer;
  font-size: 1.5rem;
  margin-left: auto;
}

.filter-section {
  display: flex;
  gap: 1rem;
  justify-content: center;
  margin: 2rem 0;
}

.empty-state {
  text-align: center;
  color: #666;
  font-style: italic;
}

.stats {
  background: #f5f5f5;
  padding: 1rem;
  border-radius: 8px;
  text-align: center;
}

[data-loading="true"] {
  opacity: 0.5;
  pointer-events: none;
}
```

## Logic {.logic}

```rust
use chrono::Utc;
use uuid::Uuid;

#[derive(Clone, Debug)]
struct Todo {
    id: String,
    title: String,
    completed: bool,
    created_at: String,
    completed_at: Option<String>,
}

fn addTodo(event: FormEvent) {
    event.prevent_default();
    
    if state.newTodo.trim().is_empty() {
        return;
    }
    
    let new_todo = Todo {
        id: Uuid::new_v4().to_string(),
        title: state.newTodo.clone(),
        completed: false,
        created_at: Utc::now().to_rfc3339(),
        completed_at: None,
    };
    
    state.todos.push(new_todo);
    state.newTodo = String::new();
}

fn toggleTodo(id: String) {
    state.todos = state.todos.map(|todo| {
        if todo.id == id {
            Todo {
                completed: !todo.completed,
                completed_at: if !todo.completed {
                    Some(Utc::now().to_rfc3339())
                } else {
                    None
                },
                ..todo
            }
        } else {
            todo
        }
    });
}

fn deleteTodo(id: String) {
    state.todos = state.todos.filter(|todo| todo.id != id);
}

fn updateFilter(event: Event) {
    state.filter = event.target.value;
}

fn clearCompleted() {
    state.todos = state.todos.filter(|todo| !todo.completed);
}
```